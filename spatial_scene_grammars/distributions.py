import numpy as np
import torch
from torch.distributions import constraints
from torch.distributions.geometric import Geometric
import pyro
from pyro.distributions.torch_distribution import TorchDistribution

class LeftSidedConstraint(constraints.Constraint):
    """
    Constrain to vectors that are 1s until they hit a 0, and then
    are all 0s.
    """
    is_discrete = True
    event_dim = 1

    def check(self, value):
        if len(value) == 0:
            return True
        is_boolean = (value == 0) | (value == 1)
        neighbor_diff = value[..., -1:] - value[..., :-1]
        return is_boolean.all(-1) & (neighbor_diff <= 0) .all(-1)
        

class VectorCappedGeometricDist(TorchDistribution):
    ''' Distribution with support over a binary vector x of length max_repeats,
    where x is generated by taking a draw k from a geometric distribution,
    capping it at max_repeats, and activating entries up to k. '''
    # TODO(gizatt): Implement enumerate_support if I ever want to rely on it
    # at inference time.
    arg_constraints = {}
    support = LeftSidedConstraint()

    def __init__(self, geometric_prob, max_repeats, validate_args=None):
        self.max_repeats = max_repeats
        self._geometric = Geometric(geometric_prob)
        batch_shape = self._geometric.batch_shape
        event_shape = torch.Size((max_repeats,))
        super(VectorCappedGeometricDist, self).__init__(batch_shape, event_shape, validate_args=validate_args)
    
    def sample(self, sample_shape=torch.Size()):
        ks = self._geometric.sample(sample_shape).int()
        out = torch.zeros(sample_shape + self.event_shape)
        out[..., :ks] = 1.
        return out

    def log_prob(self, value):
        if self._validate_args:
            self._validate_sample(value)
        valid_entries = self.support.check(value)
        generating_k = value.sum(axis=-1)
        
        geom_ll = self._geometric.log_prob(generating_k)
        # Fix those entries where generating k is the max size, which has extra prob
        # of geometric process generating any number above generating_k.
        geom_ll[generating_k == self.max_repeats] = torch.log((1.-self._geometric.probs)**((self.max_repeats - 1) + 1))
        # Also set infeasible entries to 0 prob.
        geom_ll[~valid_entries] = -np.inf
        return geom_ll